<!DOCTYPE html>
<%
var rowsCount = 5;
var columnsCount = 9;
var cellSize = 50;
%>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <script type="text/javascript" src="/javascripts/jquery.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
            var EMPTY_NAME = '空';

            var rowsCount = <%=rowsCount%>;
            var columnsCount = <%=columnsCount%>;
            var cellSize = <%=cellSize%>;
            var board = [];
            var deadPieces = [];

            function Piece(name, camp, x, y, cbMoveTo) {
                this.name = name;
                this.camp = camp;
                this.x = x;
                this.y = y;
                this.hidden = true;
                this.tryMoveTo = cbMoveTo;

                function replaceTarget(target, source) {
                    var cb = target.tryMoveTo;
                    target.name = source.name;
                    target.camp = source.camp;
                    target.tryMoveTo = source.tryMoveTo;

                    source.name = EMPTY_NAME;
                    source.camp = undefined;
                    source.tryMoveTo = undefined;
                }

                this.doMoveTo = function(anotherPiece) {
                    console.log('吼吼，走了一步。');
                    if (anotherPiece.name == EMPTY_NAME) {
                        replaceTarget(anotherPiece, this);
                    }else {
                        deadPieces.push(Piece(anotherPiece.name, anotherPiece.camp,
                            anotherPiece.x, anotherPiece.y, anotherPiece.cbMoveTo));
                        replaceTarget(anotherPiece, this);
                    }
                };
            }

            function createEmptyPieceAt(x, y) {
                var p = new Piece(EMPTY_NAME, undefined, x, y, undefined);
                p.hidden = false;
                return p;
            }

            function randomInt(upLimit) {
                return Math.round(Math.random() * 100) % upLimit;
            }

            function isInStraightLine(p1, p2) {
                return (p1.x == p2.x && p1.y != p2.y) || (p1.x != p2.x && p1.y == p2.y);
            }

            function obstaclesCountOnStraightLine(p1, p2) {
                var count = 0;
                if (p1.x == p2.x && p1.y != p2.y) {
                    var upLimit = p1.y;
                    var lowLimit = p2.y;
                    if (upLimit < lowLimit) {
                        upLimit = p2.y;
                        lowLimit = p1.y;
                    }
                    for (var i = lowLimit + 1; i < upLimit; i++) {
                        if (board[i][p1.x].name != EMPTY_NAME) {
                            count++;
                        }
                    }
                } else {
                    var upLimit = p1.x;
                    var lowLimit = p2.x;
                    if (upLimit < lowLimit) {
                        upLimit = p2.x;
                        lowLimit = p1.x;
                    }
                    for (var i = lowLimit + 1; i < upLimit; i++) {
                        if (board[p1.y][i].name != EMPTY_NAME) {
                            count++;
                        }
                    }
                }
                return count;
            }

            var piecesDesc = {
                '车': {count:2, cbMoveTo:function(piece){
                    if (isInStraightLine(this, piece)) {
                        if (obstaclesCountOnStraightLine(this, piece) == 0) {
                            this.doMoveTo(piece);
                            return true;
                        }
                    }
                    return false;
                 }},
                '马': {count:2, cbMoveTo:function(piece){
                    if(Math.abs(this.x - piece.x) == 1 && Math.abs(this.y - piece.y) == 2) {
                        if (board[(this.y + piece.y) / 2][this.x].name == EMPTY_NAME) {
                            this.doMoveTo(piece);
                            return true;
                        }
                    } else if(Math.abs(this.x - piece.x) == 2 && Math.abs(this.y - piece.y) == 1) {
                        if (board[this.y][(this.x + piece.x) / 2].name == EMPTY_NAME) {
                            this.doMoveTo(piece);
                            return true;
                        }
                    }
                    return false;
                }},
                '相': {count:2, cbMoveTo:function(piece){
                    if(Math.abs(this.x - piece.x) == 2 && Math.abs(this.y - piece.y) == 2) {
                        if (board[(this.y + piece.y) / 2][(this.x + piece.x) / 2].name == EMPTY_NAME) {
                            this.doMoveTo(piece);
                            return true;
                        }
                    }
                    return false;
                }},
                '士': {count:2, cbMoveTo:function(piece){
                    if (Math.abs(this.x - piece.x) == 1 && Math.abs(this.y - piece.y) == 1) {
                        this.doMoveTo(piece);
                        return true;
                    }
                    return false;
                }},
                '炮': {count:2, cbMoveTo:function(piece){
                    if (isInStraightLine(this, piece)) {
                        var count = obstaclesCountOnStraightLine(this, piece);
                        if (piece.camp == undefined) {
                            if (count == 0) {
                                this.doMoveTo(piece);
                                return true;
                            }
                        } else if (count == 1) {
                            this.doMoveTo(piece);
                            return true;
                        }
                    }
                    return false;
                }},
                '将': {count:1, cbMoveTo:function(piece){
                    var dx = Math.abs(this.x - piece.x);
                    var dy = Math.abs(this.y - piece.y);
                    if ((dx == 1 && (dy == 1 || dy == 0)) || (dx == 0 && dy == 1)) {
                        this.doMoveTo(piece);
                        return true;
                    }
                    return false;
                }},
                '兵': {count:5, cbMoveTo:function(piece){
                    var dx = Math.abs(this.x - piece.x);
                    var dy = Math.abs(this.y - piece.y);
                    if ((dx == 1 && dy == 0) || (dx == 0 && dy == 1)) {
                        this.doMoveTo(piece);
                        return true;
                    }
                    return false;
                }}
            };
            var availablePieces = [];
            function createPiece(camp, name, desc) {
                for (var i = 0; i < desc.count; i++) {
                    availablePieces.push({camp: camp, name: name, cb: desc.cbMoveTo});
                }
            }
            function createPiecesFor(camp) {
                Object.keys(piecesDesc).forEach(function(o){
                    createPiece(camp, o, piecesDesc[o]);
                });
            }
            createPiecesFor('red');
            createPiecesFor('black');

            function popAPieceTo(x, y) {
                if (availablePieces.length > 0) {
                    var piece = undefined;
                    if (availablePieces.length == 1) {
                        piece = availablePieces[0];
                    } else {
                        piece = availablePieces.splice(randomInt(availablePieces.length), 1)[0];
                    }
                    return new Piece(piece.name, piece.camp, x, y, piece.cb);
                } else {
                    return createEmptyPieceAt(x, y);
                }
            }

            var emptyColumn = Math.floor(columnsCount / 2);
            var emptyRow = rowsCount - 1;
            for (var i = 0; i < rowsCount; i++) {
                board.push([]);
                if (i == emptyRow) {
                    for (var j = 0; j < columnsCount; j++) {
                        board[i].push(createEmptyPieceAt(j, i));
                    }
                } else {

                    for (var j = 0; j < columnsCount; j++) {
                        if (j == emptyColumn) {
                            board[i].push(createEmptyPieceAt(j, i));
                        } else {
                            board[i].push(popAPieceTo(j, i));
                        }
                    }
                }
            }

            var aiPlayer = {
                play: function() {
                    console.log('电脑假装走了一步。');
                },
            };
            function getCellFromMami(jqMami) {
                var x = jqMami.css('left');
                var y = jqMami.css('top');
                x = x.substring(0, x.length - 2) / cellSize;
                y = y.substring(0, y.length - 2) / cellSize;
                return board[y][x];
            }
            function updateMamiForCell(jqMami, cell) {
                if (cell.hidden) {
                    return;
                } else {
                    jqMami.addClass('discovered');
                }
                if (cell.name == EMPTY_NAME) {
                    jqMami.removeClass('red discovered selected').addClass('discovered').text('');
                } else {
                    jqMami.removeClass('red black').text(cell.name);
                    if (cell.camp == 'red') {
                        jqMami.addClass('red');
                    } else {
                        jqMami.addClass('black');
                    }
                }
            }
            var humanPlayer = {
                selectedAlly: undefined,
                camp: undefined,
                tryMovePiece: function(targetMami) {
                    var selected = getCellFromMami(this.selectedAlly);
                    var targetCell = getCellFromMami(targetMami);
                    if (selected.tryMoveTo(targetCell)) {
                        updateMamiForCell(this.selectedAlly, selected);
                        updateMamiForCell(targetMami, targetCell);
                        this.selectedAlly = undefined;
                        aiPlayer.play();
                    } else {
                        console.log('不能这么走，你要去学一学中国象棋基本规则。');
                    }
                },
                play: function(e) {
                    var clicked = $(e.currentTarget);
                    var cell = getCellFromMami(clicked);

                    console.log('TODO：现在已有选中棋子时，点击未翻开的棋子会翻开棋子，行为不对。');
                    if (this.selectedAlly == undefined) {
                        if (cell.name == EMPTY_NAME) {
                            console.log('点击空地。');
                        } else {
                            if (cell.hidden) {
                                console.log('翻开一颗 ' + cell.camp + ' 棋子。');

                                if (this.camp == undefined) {
                                    this.camp = cell.camp;
                                }
                                cell.hidden = false;
                                clicked.addClass('discovered ' + cell.camp).text(cell.name);
                                aiPlayer.play();
                            } else {
                                if (this.camp == cell.camp) {
                                    console.log('选择一颗己方 ' + cell.camp + ' 棋子。');
                                    clicked.addClass('selected');
                                    this.selectedAlly = clicked;
                                } else {
                                    console.log('敌方棋子，无法选择。');
                                }
                            }
                        }
                    } else {
                        if (cell.name == EMPTY_NAME) {
                            this.tryMovePiece(clicked);
                        } else {
                            if (cell.hidden) {
                                console.log('要翻开棋子，请取消当前选择的棋子。');
                                return;
                            }
                            if (cell.camp == this.camp) {
                                $('.cell').removeClass('selected');
                                if (this.selectedAlly.get(0) == clicked.get(0)) {
                                    console.log('取消选择。');
                                    this.selectedAlly = undefined;
                                } else {
                                    console.log('切换选择。');
                                    clicked.addClass('selected');
                                    this.selectedAlly = clicked;
                                }
                            } else {
                                this.tryMovePiece(clicked);
                            }
                        }
                    }
                },
            };

            $('.cell').click(function(e){
                humanPlayer.play(e);
            });
            $('.cell').each(function(i, o){
                var jqMami = $(o);
                updateMamiForCell(jqMami, getCellFromMami(jqMami));
            });
        });
    </script>
  </head>
  <body>
    <h1><%= title %></h1>
    <p>欢迎赏玩<%= title %></p>
	<div id="board">
	<% for (var i = 0; i < rowsCount; i++) { %>
		<% for (var j = 0; j < columnsCount; j++) { %>
			<div class="cell" style="width:<%=cellSize%>px;height:<%=cellSize%>px;top:<%=i*cellSize%>px;left:<%=j*cellSize%>px;">
			</div>
		<% } %>
		<br>
	<% } %>
	</div>
  </body>
</html>
